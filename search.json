[{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"introduction-to-the-tedm-package","dir":"Articles","previous_headings":"","what":"1. Introduction to the tEDM package","title":"Temporal Empirical Dynamic Modeling","text":"tEDM package provides suite tools exploring quantifying causality time series using Empirical Dynamic Modeling (EDM). implements four fundamental EDM-based causal discovery methods: Convergent Cross Mapping (CCM) Partial Cross Mapping (PCM) Cross Mapping Cardinality (CMC) Multispatial Convergent Cross Mapping (MultispatialCCM) methods enable researchers : Identify potential causal interactions without assuming predefined model structure. Distinguish direct causation indirect (mediated confounded) influences. Reconstruct underlying causal dynamics replicated univariate time series observed across multiple spatial units.","code":""},{"path":[]},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"hong-kong-air-pollution-and-cardiovascular-admissions","dir":"Articles","previous_headings":"2. Example data in the tEDM package","what":"Hong Kong Air Pollution and Cardiovascular Admissions","title":"Temporal Empirical Dynamic Modeling","text":"daily time series dataset(1995-3 1997-11) Hong Kong includes cardiovascular hospital admissions major air pollutant concentrations. File: cvd.csv Columns: Source: Data adapted PCM article.","code":""},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"us-county-level-carbon-emissions-dataset","dir":"Articles","previous_headings":"2. Example data in the tEDM package","what":"US County-Level Carbon Emissions Dataset","title":"Temporal Empirical Dynamic Modeling","text":"panel dataset covering U.S. county-level temperature carbon emissions across time. File: carbon.csv.gz Columns: Source: Data adapted FsATE article.","code":""},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"covid-19-infection-counts-in-japan","dir":"Articles","previous_headings":"2. Example data in the tEDM package","what":"COVID-19 Infection Counts in Japan","title":"Temporal Empirical Dynamic Modeling","text":"spatio-temporal dataset capturing number confirmed COVID-19 infections across Japan’s 47 prefectures time. File: covid.csv Structure: column represents one 47 Japanese prefectures (e.g., Tokyo, Osaka, Hokkaido). row corresponds time step (daily). Source: Data adapted CMC article.","code":""},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"case-studies-of-the-tedm-package","dir":"Articles","previous_headings":"","what":"3. Case studies of the tEDM package","title":"Temporal Empirical Dynamic Modeling","text":"Install stable version: dev version:","code":"install.packages(\"tEDM\", dep = TRUE) install.packages(\"tEDM\",                  repos = c(\"https://stscl.r-universe.dev\",                            \"https://cloud.r-project.org\"),                  dep = TRUE)"},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"air-pollution-and-cardiovascular-health-in-hong-kong","dir":"Articles","previous_headings":"3. Case studies of the tEDM package","what":"Air Pollution and Cardiovascular Health in Hong Kong","title":"Temporal Empirical Dynamic Modeling","text":"Employing CCM, CMC PCM investigate causal relationships various air pollutants cardiovascular diseases: Determining optimal embedding dimension: Starting \\(E = 11\\), FNN ratio stabilizes near 0.18; thus, embedding dimension E neighbor number k chosen 11 onward subsequent self-prediction parameter selection. first use CCM explore causal influences air pollutants incidence cardiovascular diseases. results shown Figure2 indicate presence following causal influences: rsp → cvd ₂ → cvd ₂ → cvd cvd → rsp cvd → ₂ cvd → ₂ cvd → o₃ However, based practical experience, relationship CVDs air pollution likely reflective rather causal. Therefore, employ CCM examine causal paths cvd → ₂ cvd → o₃. causal paths CVDs air pollutants statistically significant CMC analysis results, allowing us rule four directions. Meanwhile, causal strength ₂ CVDs weak (approximately 0.05), excluding existence causal path ₂ CVDs. Therefore, conclude RSP ₂ exhibit causal influences CVDs, evidence feedback causality. aim explore potential causal interactions among different air pollutants. However, due space constraints vignette, limit analysis single test case — specifically, examining whether ₂ exerts causal influence Respirable Suspended Particulates (rsp). CCM PCM results ₂ respirable suspended particulates show minimal differences statistically significant, indicating presence causal relationship two. Therefore, final set confirmed causal pathways follows (exclude causal influence CVDs): Figure 4. Causal interactions air pollutants cardiovascular diseases Hong Kong.","code":"library(tEDM)  cvd = readr::read_csv(system.file(\"case/cvd.csv\",package = \"tEDM\")) ## Rows: 1032 Columns: 5 ## ── Column specification ───────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (5): cvd, rsp, no2, so2, o3 ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(cvd) ## # A tibble: 6 × 5 ##     cvd   rsp   no2   so2    o3 ##   <dbl> <dbl> <dbl> <dbl> <dbl> ## 1   214  73.7  74.5  19.1 17.4  ## 2   203  77.6  80.9  18.8 39.4  ## 3   202  64.8  67.1  13.8 56.4  ## 4   182  68.8  74.7  30.8  5.6  ## 5   181  49.4  62.3  23.1  3.6  ## 6   129  67.4  63.6  17.4  6.73 cvd_long = cvd |>   tibble::rowid_to_column(\"id\") |>   tidyr::pivot_longer(cols = -id,                       names_to = \"variable\", values_to = \"value\")  fig1 = ggplot2::ggplot(cvd_long, ggplot2::aes(x = id, y = value, color = variable)) +   ggplot2::geom_line(linewidth = 1) +   ggplot2::labs(x = \"Days (from 1995-3 to 1997-11)\", y = \"Concentrations or \\nNO. of CVD admissions\", color = \"\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.direction = \"horizontal\",                  legend.position = \"inside\",                  legend.justification = c(\"center\",\"top\"),                  legend.background = ggplot2::element_rect(fill = \"transparent\", color = NA)) fig1 tEDM::fnn(cvd,\"cvd\",E = 2:50,eps = stats::sd(cvd$cvd)) ##       E:1       E:2       E:3       E:4       E:5       E:6       E:7       E:8  ## 0.8275862 0.4944072 0.3044807 0.2902240 0.2148676 0.2067210 0.1945010 0.1853360  ##       E:9      E:10      E:11      E:12      E:13      E:14      E:15      E:16  ## 0.1863544 0.1894094 0.1832994 0.1843177 0.1782077 0.1710794 0.1680244 0.1680244  ##      E:17      E:18      E:19      E:20      E:21      E:22      E:23      E:24  ## 0.1547862 0.1537678 0.1670061 0.1568228 0.1588595 0.1710794 0.1639511 0.1659878  ##      E:25      E:26      E:27      E:28      E:29      E:30      E:31      E:32  ## 0.1670061 0.1873727 0.1659878 0.1751527 0.1731161 0.1812627 0.1710794 0.1802444  ##      E:33      E:34      E:35      E:36      E:37      E:38      E:39      E:40  ## 0.1700611 0.1720978 0.1710794 0.1629328 0.1517312 0.1639511 0.1670061 0.1700611  ##      E:41      E:42      E:43      E:44      E:45      E:46      E:47      E:48  ## 0.1659878 0.1649695 0.1670061 0.1690428 0.1619145 0.1670061 0.1792261 0.1822811  ##      E:49  ## 0.1761711 tEDM::simplex(cvd,\"cvd\",\"cvd\",E = 11:35,k = 12:36) ## The suggested E and k for variable cvd is 11 and 12 tEDM::simplex(cvd,\"rsp\",\"rsp\",E = 11:35,k = 12:36) ## The suggested E and k for variable rsp is 11 and 13 tEDM::simplex(cvd,\"no2\",\"no2\",E = 11:35,k = 12:36) ## The suggested E and k for variable no2 is 11 and 12 tEDM::simplex(cvd,\"so2\",\"so2\",E = 11:35,k = 12:36) ## The suggested E and k for variable so2 is 11 and 18 tEDM::simplex(cvd,\"o3\",\"o3\",E = 11:35,k = 12:36) ## The suggested E and k for variable o3 is 11 and 12 rsp_cvd = tEDM::ccm(cvd,\"rsp\",\"cvd\",libsizes = seq(32,1032,100),E = 11,k = c(13,12),progressbar = FALSE) rsp_cvd ##    libsizes   rsp->cvd   cvd->rsp ## 1        32 0.03212919 0.01228767 ## 2       132 0.05654363 0.02018887 ## 3       232 0.06463454 0.03607634 ## 4       332 0.06064099 0.04698896 ## 5       432 0.06180930 0.04813387 ## 6       532 0.06262916 0.04713303 ## 7       632 0.05983990 0.04859066 ## 8       732 0.05386418 0.05365310 ## 9       832 0.04783700 0.05779265 ## 10      932 0.04788904 0.06048993 ## 11     1021 0.11465191 0.10133554 no2_cvd = tEDM::ccm(cvd,\"no2\",\"cvd\",libsizes = seq(32,1032,100),E = 11,k = 12,progressbar = FALSE) no2_cvd ##    libsizes  no2->cvd   cvd->no2 ## 1        32 0.0725866 0.04646570 ## 2       132 0.1223500 0.07452473 ## 3       232 0.1440400 0.10979245 ## 4       332 0.1463108 0.12676364 ## 5       432 0.1493368 0.13259880 ## 6       532 0.1505781 0.13601417 ## 7       632 0.1463268 0.13721917 ## 8       732 0.1392535 0.13837513 ## 9       832 0.1352347 0.13943520 ## 10      932 0.1359023 0.14033241 ## 11     1021 0.2701247 0.18804876 so2_cvd = tEDM::ccm(cvd,\"so2\",\"cvd\",libsizes = seq(32,1032,100),E = 11,k = c(18,12),progressbar = FALSE) so2_cvd ##    libsizes   so2->cvd   cvd->so2 ## 1        32 0.05100118 0.03461720 ## 2       132 0.07979493 0.07406730 ## 3       232 0.07390120 0.08535797 ## 4       332 0.06454759 0.09205499 ## 5       432 0.06421670 0.09589412 ## 6       532 0.06667487 0.09915476 ## 7       632 0.06752325 0.10104920 ## 8       732 0.06628738 0.10265838 ## 9       832 0.06534601 0.10523615 ## 10      932 0.06505378 0.10782963 ## 11     1021 0.12820854 0.11510196 o3_cvd = tEDM::ccm(cvd,\"o3\",\"cvd\",libsizes = seq(32,1032,100),E = 11,k = 12,progressbar = FALSE) o3_cvd ##    libsizes      o3->cvd    cvd->o3 ## 1        32  0.002955184 0.02271010 ## 2       132 -0.002839356 0.05643341 ## 3       232 -0.009653301 0.07583492 ## 4       332 -0.018512914 0.08387571 ## 5       432 -0.019942039 0.08175905 ## 6       532 -0.015815466 0.07819425 ## 7       632 -0.014698935 0.07679967 ## 8       732 -0.019196844 0.07226140 ## 9       832 -0.023726153 0.06974574 ## 10      932 -0.024137957 0.06943232 ## 11     1021  0.013982373 0.09503517 figa = plot(rsp_cvd,ylimits = c(0,0.12),ybreaks = c(0,0.05,0.10)) figb = plot(no2_cvd,ylimits = c(0.03,0.30),ybreaks = seq(0.05,0.25,0.05)) figc = plot(so2_cvd,ylimits = c(0.03,0.15),ybreaks = c(0,0.15,0.05)) figd = plot(o3_cvd,ylimits = c(-0.05,0.1),ybreaks = c(-0.05,0.05,0.05))  fig2 = cowplot::plot_grid(figa, figb, figc, figd, ncol = 2,                          label_fontfamily = 'serif',                          labels = letters[1:4]) fig2 g1 = tEDM::cmc(cvd,\"rsp\",\"cvd\",E = 11,k = 50,progressbar = FALSE) g1 ##   neighbors rsp->cvd cvd->rsp ## 1        50    0.364   0.4696 g1$xmap ##   neighbors x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1        50        0.4696     0.645344      0.5990605      0.3401395 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower ## 1         0.364   0.03509439      0.4904932      0.2375068  g2 = tEDM::cmc(cvd,\"so2\",\"cvd\",E = 11,k = 50,progressbar = FALSE) g2 ##   neighbors so2->cvd cvd->so2 ## 1        50    0.046     0.46 g2$xmap ##   neighbors x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1        50          0.46    0.5434416      0.5890263      0.3309737 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower ## 1         0.046 3.508029e-77      0.0938521              0  g3 = tEDM::cmc(cvd,\"no2\",\"cvd\",E = 11,k = 50,progressbar = FALSE) g3 ##   neighbors no2->cvd cvd->no2 ## 1        50   0.2728    0.446 g3$xmap ##   neighbors x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1        50         0.446    0.4123805      0.5751162      0.3168838 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower ## 1        0.2728 0.0001114126      0.3880356      0.1575644  g4 = tEDM::cmc(cvd,\"o3\",\"cvd\",E = 11,k = 50,progressbar = FALSE) g4 ##   neighbors o3->cvd cvd->o3 ## 1        50  0.0536  0.4628 g4$xmap ##   neighbors x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1        50        0.4628    0.5733574      0.5922777      0.3333223 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower ## 1        0.0536 8.756939e-60      0.1072525              0 no2_rsp = tEDM::pcm(cvd,\"no2\",\"rsp\",\"cvd\",libsizes = seq(32,1032,100),E = 11,k = c(12,13,12),progressbar = FALSE) no2_rsp ## --------------------------------------  ## ***partial cross mapping prediction***  ## --------------------------------------  ##    libsizes  no2->rsp  rsp->no2 ## 1        32 0.5003795 0.5287113 ## 2       132 0.6586740 0.6540733 ## 3       232 0.6739825 0.6725413 ## 4       332 0.6869853 0.6898026 ## 5       432 0.6936791 0.7003889 ## 6       532 0.6972028 0.7064767 ## 7       632 0.7021889 0.7115672 ## 8       732 0.7038956 0.7154391 ## 9       832 0.7051222 0.7172094 ## 10      932 0.7053735 0.7181287 ## 11     1021 0.7355427 0.7249313 ##  ## ------------------------------  ## ***cross mapping prediction***  ## ------------------------------  ##    libsizes  no2->rsp  rsp->no2 ## 1        32 0.4973450 0.5286056 ## 2       132 0.6727828 0.6705453 ## 3       232 0.6958408 0.6953063 ## 4       332 0.7076968 0.7127944 ## 5       432 0.7114252 0.7198838 ## 6       532 0.7128014 0.7238218 ## 7       632 0.7132465 0.7269140 ## 8       732 0.7139286 0.7281575 ## 9       832 0.7148172 0.7286784 ## 10      932 0.7156600 0.7287909 ## 11     1021 0.7438401 0.7541179  figa = plot(no2_rsp,partial = FALSE,ylimits = c(0.45,0.8),ybreaks = seq(0.45,0.8,0.05)) figb = plot(no2_rsp,ylimits = c(0.45,0.8),ybreaks = seq(0.45,0.8,0.05))  fig3 = cowplot::plot_grid(figa, figb, ncol = 2,                           label_fontfamily = 'serif',                           labels = letters[1:2]) fig3"},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"us-county-carbon-emissions-and-temperature-dynamics","dir":"Articles","previous_headings":"3. Case studies of the tEDM package","what":"US County Carbon Emissions and Temperature Dynamics","title":"Temporal Empirical Dynamic Modeling","text":"examine whether causal relationship exists annual mean temperature total annual CO₂ emissions, implement CMC method across counties. Using 100th county example, determine appropriate embedding dimension applying FNN method. E equals 3, FNN ratio begins drop zero; therefore, select \\(E = 3\\) embedding dimension CMC analysis.","code":"library(tEDM)  carbon = readr::read_csv(system.file(\"case/carbon.csv.gz\",package = \"tEDM\")) ## Rows: 113627 Columns: 4 ## ── Column specification ───────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (4): year, fips, tem, carbon ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(carbon) ## # A tibble: 6 × 4 ##    year  fips   tem     carbon ##   <dbl> <dbl> <dbl>      <dbl> ## 1  1981  1001  17.4 192607687. ## 2  1982  1001  18.4 187149414. ## 3  1983  1001  16.9 191584445. ## 4  1984  1001  17.8 199157579. ## 5  1985  1001  17.9 205207564. ## 6  1986  1001  18.5 218446030.  carbon_list = dplyr::group_split(carbon, by = fips) length(carbon_list) ## [1] 3071 tEDM::fnn(carbon_list[[100]],\"carbon\",E = 2:10,eps = stats::sd(carbon_list[[100]]$carbon)) ##        E:1        E:2        E:3        E:4        E:5        E:6        E:7  ## 0.37037037 0.03703704 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000  ##        E:8        E:9  ## 0.00000000 0.00000000 res = carbon_list |>   purrr::map_dfr(\\(.x) {     g = tEDM::cmc(.x,\"tem\",\"carbon\",E = 3,k = 20,progressbar = FALSE)     return(g$xmap)   }) head(res) ##   neighbors x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1        20       0.25125 2.124762e-03      0.4099436     0.09255637 ## 2        20       0.20375 5.512985e-05      0.3477313     0.05976872 ## 3        20       0.19875 3.159932e-05      0.3406271     0.05687288 ## 4        20       0.19875 4.990860e-05      0.3443198     0.05318018 ## 5        20       0.23875 1.142665e-03      0.3961644     0.08133556 ## 6        20       0.17375 1.734913e-06      0.3074655     0.04003447 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower ## 1       0.05125 2.626718e-31      0.1268212              0 ## 2       0.05875 8.667168e-29      0.1364321              0 ## 3       0.06125 8.776684e-26      0.1431602              0 ## 4       0.06000 3.141877e-27      0.1397885              0 ## 5       0.06250 1.945554e-26      0.1430922              0 ## 6       0.05375 5.280357e-31      0.1292878              0  res_carbon = res |>   dplyr::select(neighbors,                 carbon_tem = x_xmap_y_mean,                 tem_carbon = y_xmap_x_mean) |>   tidyr::pivot_longer(c(carbon_tem, tem_carbon),                       names_to = \"variable\", values_to = \"value\") head(res_carbon) ## # A tibble: 6 × 3 ##   neighbors variable    value ##       <dbl> <chr>       <dbl> ## 1        20 carbon_tem 0.251  ## 2        20 tem_carbon 0.0512 ## 3        20 carbon_tem 0.204  ## 4        20 tem_carbon 0.0588 ## 5        20 carbon_tem 0.199  ## 6        20 tem_carbon 0.0612 fig_case2 = ggplot2::ggplot(res_carbon,                             ggplot2::aes(x = variable, y = value, fill = variable)) +   ggplot2::geom_boxplot() +   ggplot2::theme_bw() +   ggplot2::scale_x_discrete(name = \"\",                             labels = c(\"carbon_tem\" = \"carbon → tem\",                                        \"tem_carbon\" = \"tem → carbon\")) +   ggplot2::scale_y_continuous(name = \"Causal Strength\") +   ggplot2::theme(legend.position = \"none\") fig_case2"},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"covid-19-spread-across-japanese-prefectures","dir":"Articles","previous_headings":"3. Case studies of the tEDM package","what":"COVID-19 Spread Across Japanese Prefectures","title":"Temporal Empirical Dynamic Modeling","text":"examine COVID-19 transmission Tokyo prefectures applying CCM identify underlying causal dynamics epidemic spread data first differenced: Using Tokyo’s COVID-19 infection data test optimal embedding dimension. Since FNN ratio begins approach zero E equals 4, embedding dimensions 4 onward evaluated, pair E k yielding highest self-prediction accuracy selected CCM procedure. Using 0.90 threshold (rounded two decimal places), map causal responses spread COVID-19 Tokyo causal strength greater 0.90.","code":"library(tEDM)  covid = readr::read_csv(system.file(\"case/covid.csv\",package = \"tEDM\")) ## Rows: 334 Columns: 47 ## ── Column specification ───────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (47): Hokkaido, Aomori, Iwate, Miyagi, Akita, Yamagata, Fukushima, Ibarak... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(covid) ## # A tibble: 6 × 47 ##   Hokkaido Aomori Iwate Miyagi Akita Yamagata Fukushima Ibaraki Tochigi Gunma ##      <dbl>  <dbl> <dbl>  <dbl> <dbl>    <dbl>     <dbl>   <dbl>   <dbl> <dbl> ## 1        0      0     0      0     0        0         0       0       0     0 ## 2        0      0     0      0     0        0         0       0       0     0 ## 3        0      0     0      0     0        0         0       0       0     0 ## 4        0      0     0      0     0        0         0       0       0     0 ## 5        0      0     0      0     0        0         0       0       0     0 ## 6        0      0     0      0     0        0         0       0       0     0 ## # ℹ 37 more variables: Saitama <dbl>, Chiba <dbl>, Tokyo <dbl>, Kanagawa <dbl>, ## #   Niigata <dbl>, Toyama <dbl>, Ishikawa <dbl>, Fukui <dbl>, Yamanashi <dbl>, ## #   Nagano <dbl>, Gifu <dbl>, Shizuoka <dbl>, Aichi <dbl>, Mie <dbl>, ## #   Shiga <dbl>, Kyoto <dbl>, Osaka <dbl>, Hyogo <dbl>, Nara <dbl>, ## #   Wakayama <dbl>, Tottori <dbl>, Shimane <dbl>, Okayama <dbl>, ## #   Hiroshima <dbl>, Yamaguchi <dbl>, Tokushima <dbl>, Kagawa <dbl>, ## #   Ehime <dbl>, Kochi <dbl>, Fukuoka <dbl>, Saga <dbl>, Nagasaki <dbl>, … covid = covid |>   dplyr::mutate(dplyr::across(dplyr::everything(),                               \\(.x) c(NA,diff(.x)))) tEDM::fnn(covid,\"Tokyo\",E = 2:30,eps = stats::sd(covid$Tokyo)/10) ##        E:1        E:2        E:3        E:4        E:5        E:6        E:7  ## 0.79452055 0.16901408 0.01351351 0.00000000 0.00000000 0.00000000 0.00000000  ##        E:8        E:9       E:10       E:11       E:12       E:13       E:14  ## 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000  ##       E:15       E:16       E:17       E:18       E:19       E:20       E:21  ## 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000  ##       E:22       E:23       E:24       E:25       E:26       E:27       E:28  ## 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000  ##       E:29  ## 0.00000000 tEDM::simplex(covid,\"Tokyo\",\"Tokyo\",E = 4:50,k = 5:60) ## The suggested E and k for variable Tokyo is 4 and 5 res = names(covid)[-match(\"Tokyo\",names(covid))] |>   purrr::map_dfr(\\(.l) {     g = tEDM::ccm(covid,\"Tokyo\",.l,E = 4,k = 5,tau = 0,progressbar = FALSE)     res = dplyr::mutate(g$xmap,x = \"Tokyo\",y = .l)     return(res)   }) head(res) ##   libsizes x_xmap_y_mean x_xmap_y_sig x_xmap_y_upper x_xmap_y_lower ## 1      330    0.67946026 5.040237e-46     0.61673862      0.7336087 ## 2      330    0.16587490 2.504472e-03     0.05896709      0.2690210 ## 3      330    0.57198896 4.570356e-30     0.49456667      0.6404051 ## 4      330    0.48695807 4.721760e-21     0.40002512      0.5652068 ## 5      330    0.01813049 7.428103e-01    -0.09000951      0.1258480 ## 6      330    0.59876324 1.747480e-33     0.52471981      0.6638149 ##   y_xmap_x_mean y_xmap_x_sig y_xmap_x_upper y_xmap_x_lower     x        y ## 1     0.7109490 4.377688e-52      0.6531163      0.7605365 Tokyo Hokkaido ## 2     0.4283765 3.684937e-16      0.3359501      0.5126315 Tokyo   Aomori ## 3     0.7497992 8.652007e-61      0.6983692      0.7935262 Tokyo    Iwate ## 4     0.7060805 4.274506e-51      0.6474744      0.7563843 Tokyo   Miyagi ## 5     0.2951683 4.658751e-08      0.1933666      0.3906821 Tokyo    Akita ## 6     0.5089213 3.832070e-23      0.4242690      0.5847557 Tokyo Yamagata  df1 = res |>     dplyr::select(x,y,y_xmap_x_mean,y_xmap_x_sig)|>     purrr::set_names(c(\"cause\",\"effect\",\"cs\",\"sig\")) df2 = res |>     dplyr::select(y,x,x_xmap_y_mean,x_xmap_y_sig) |>     purrr::set_names(c(\"cause\",\"effect\",\"cs\",\"sig\")) res_covid = dplyr::bind_rows(df1,df2)|>   dplyr::filter(cause == \"Tokyo\") |>   dplyr::arrange(dplyr::desc(cs)) head(res_covid,10) ##    cause   effect        cs           sig ## 1  Tokyo    Osaka 0.9296920 2.534740e-144 ## 2  Tokyo Kanagawa 0.9260169 7.921221e-141 ## 3  Tokyo  Saitama 0.9105236 7.469393e-128 ## 4  Tokyo    Chiba 0.9092392 6.936383e-127 ## 5  Tokyo    Hyogo 0.8998115 3.402957e-120 ## 6  Tokyo    Aichi 0.8990747 1.062894e-119 ## 7  Tokyo     Nara 0.8743578 5.100364e-105 ## 8  Tokyo  Ibaraki 0.8719708 9.088820e-104 ## 9  Tokyo Shizuoka 0.8680988 8.611093e-102 ## 10 Tokyo     Gifu 0.8470633  4.766119e-92 res_covid = res_covid |>   dplyr::mutate(cs = round(res_covid$cs,2)) |>   dplyr::filter(cs >= 0.90) res_covid ##   cause   effect   cs           sig ## 1 Tokyo    Osaka 0.93 2.534740e-144 ## 2 Tokyo Kanagawa 0.93 7.921221e-141 ## 3 Tokyo  Saitama 0.91 7.469393e-128 ## 4 Tokyo    Chiba 0.91 6.936383e-127 ## 5 Tokyo    Hyogo 0.90 3.402957e-120 ## 6 Tokyo    Aichi 0.90 1.062894e-119  if (!requireNamespace(\"rnaturalearth\")) {     install.packages(\"rnaturalearth\") } ## Loading required namespace: rnaturalearth jp = rnaturalearth::ne_states(country = \"Japan\")  if (!requireNamespace(\"tidygeocoder\")) {     install.packages(\"tidygeocoder\") } ## Loading required namespace: tidygeocoder jpp = tibble::tibble(name = c(\"Tokyo\",res_covid$effect)) |>   tidygeocoder::geocode(state = name, method = \"arcgis\",                         long = \"lon\", lat = \"lat\") ## Passing 7 addresses to the ArcGIS single address geocoder ## Query completed in: 7.6 seconds  fig_case3 = ggplot2::ggplot() +   ggplot2::geom_sf(data = jp, fill = \"#ffe7b7\", color = \"grey\", linewidth = 0.45) +   ggplot2::geom_curve(data = jpp[-1,],                       ggplot2::aes(x = jpp[1,\"lon\",drop = TRUE],                                    y = jpp[1,\"lat\",drop = TRUE],                                    xend = lon, yend = lat),                       curvature = 0.2,                       arrow = ggplot2::arrow(length = ggplot2::unit(0.2, \"cm\")),                       color = \"#6eab47\", linewidth = 1) +   ggplot2::geom_point(data = jpp[-1,], ggplot2::aes(x = lon, y = lat),                       color = \"#cf574b\", size = 1.25) +   ggrepel::geom_text_repel(data = jpp[-1,], color = \"#cf574b\",                            ggplot2::aes(label = name, x = lon, y = lat)) +   ggplot2::geom_point(data = jpp[1,], ggplot2::aes(x = lon, y = lat),                       color = \"#2c74b7\", size = 1.25) +   ggrepel::geom_text_repel(data = jpp[1,], color = \"#2c74b7\",                            ggplot2::aes(label = name, x = lon, y = lat)) +   ggplot2::coord_sf(xlim = range(jpp$lon) + c(-0.45,0.45),                     ylim = range(jpp$lat) + c(-0.75,0.75)) +   ggplot2::labs(x = \"\", y = \"\") +   ggplot2::theme_bw() +   ggplot2::theme(panel.background = ggplot2::element_rect(fill = \"#9cd1fd\", color = NA)) fig_case3"},{"path":"https://stscl.github.io/tEDM/articles/tEDM.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Temporal Empirical Dynamic Modeling","text":"Sugihara, G., May, R., Ye, H., Hsieh, C., Deyle, E., Fogarty, M., Munch, S., 2012. Detecting Causality Complex Ecosystems. Science 338, 496–500. https://doi.org/10.1126/science.1227079. Leng, S., Ma, H., Kurths, J., Lai, Y.-C., Lin, W., Aihara, K., Chen, L., 2020. Partial cross mapping eliminates indirect causal influences. Nature Communications 11. https://doi.org/10.1038/s41467-020-16238-0. Tao, P., Wang, Q., Shi, J., Hao, X., Liu, X., Min, B., Zhang, Y., Li, C., Cui, H., Chen, L., 2023. Detecting dynamical causality intersection cardinal concavity. Fundamental Research. https://doi.org/10.1016/j.fmre.2023.01.007. Clark, .T., Ye, H., Isbell, F., Deyle, E.R., Cowles, J., Tilman, G.D., Sugihara, G., 2015. Spatial convergent cross mapping detect causal relationships short time series. Ecology 96, 1174–1181. https://doi.org/10.1890/14-1479.1. Gan, T., Succar, R., Macrì, S., Marín, M.R., Porfiri, M., 2025. Causal discovery city data, urban scaling meets information theory. Cities 162, 105980. https://doi.org/10.1016/j.cities.2025.105980.  ","code":""},{"path":"https://stscl.github.io/tEDM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer, copyright holder.","code":""},{"path":"https://stscl.github.io/tEDM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lv W (2025). tEDM: Temporal Empirical Dynamic Modeling. R package version 1.1, https://stscl.github.io/tEDM/.","code":"@Manual{,   title = {tEDM: Temporal Empirical Dynamic Modeling},   author = {Wenbo Lv},   year = {2025},   note = {R package version 1.1},   url = {https://stscl.github.io/tEDM/}, }"},{"path":"https://stscl.github.io/tEDM/index.html","id":"tedm-","dir":"","previous_headings":"","what":"tEDM | Temporal Empirical Dynamic Modeling\n","title":"tEDM | Temporal Empirical Dynamic Modeling\n","text":"Temporal Empirical Dynamic Modeling","code":""},{"path":"https://stscl.github.io/tEDM/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"tEDM | Temporal Empirical Dynamic Modeling\n","text":"tEDM package provides suite tools exploring quantifying causality time series using Empirical Dynamic Modeling (EDM). particularly designed detect, differentiate, reconstruct causal dynamics systems traditional assumptions linearity stationarity may hold. package implements four fundamental EDM-based methods: Convergent Cross Mapping (CCM) – detecting nonlinear causal relationships time series. Partial Cross Mapping (PCM) – disentangling direct indirect causal influences. Cross Mapping Cardinality (CMC) – identifying time-varying state-dependent causal linkages. Multispatial Convergent Cross Mapping (MultispatialCCM) – reconstructing causal dynamics replicated time series across multiple spatial locations.","code":""},{"path":"https://stscl.github.io/tEDM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"tEDM | Temporal Empirical Dynamic Modeling\n","text":"Install CRAN : Install binary version R-universe : Install source code GitHub :","code":"install.packages(\"tEDM\", dep = TRUE) install.packages(\"tEDM\",                  repos = c(\"https://stscl.r-universe.dev\",                            \"https://cloud.r-project.org\"),                  dep = TRUE) if (!requireNamespace(\"devtools\")) {     install.packages(\"devtools\") } devtools::install_github(\"stscl/tEDM\",                          #build_vignettes = TRUE,                          dep = TRUE)"},{"path":"https://stscl.github.io/tEDM/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"tEDM | Temporal Empirical Dynamic Modeling\n","text":"Sugihara, G., May, R., Ye, H., Hsieh, C., Deyle, E., Fogarty, M., Munch, S., 2012. Detecting Causality Complex Ecosystems. Science 338, 496–500. https://doi.org/10.1126/science.1227079. Leng, S., Ma, H., Kurths, J., Lai, Y.-C., Lin, W., Aihara, K., Chen, L., 2020. Partial cross mapping eliminates indirect causal influences. Nature Communications 11. https://doi.org/10.1038/s41467-020-16238-0. Tao, P., Wang, Q., Shi, J., Hao, X., Liu, X., Min, B., Zhang, Y., Li, C., Cui, H., Chen, L., 2023. Detecting dynamical causality intersection cardinal concavity. Fundamental Research. https://doi.org/10.1016/j.fmre.2023.01.007. Clark, .T., Ye, H., Isbell, F., Deyle, E.R., Cowles, J., Tilman, G.D., Sugihara, G., 2015. Spatial convergent cross mapping detect causal relationships short time series. Ecology 96, 1174–1181. https://doi.org/10.1890/14-1479.1.  ","code":""},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":null,"dir":"Reference","previous_headings":"","what":"convergent cross mapping — ccm","title":"convergent cross mapping — ccm","text":"convergent cross mapping","code":""},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convergent cross mapping — ccm","text":"","code":"# S4 method for class 'data.frame' ccm(   data,   cause,   effect,   libsizes = NULL,   E = 3,   tau = 0,   k = E + 1,   theta = 1,   algorithm = \"simplex\",   lib = NULL,   pred = NULL,   threads = length(libsizes),   parallel.level = \"low\",   bidirectional = TRUE,   progressbar = TRUE )"},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convergent cross mapping — ccm","text":"data observation data. cause name causal variable. effect name effect variable. libsizes (optional) number time points used. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors. theta (optional) weighting parameter distances, useful algorithm smap. algorithm (optional) prediction algorithm. lib (optional) libraries indices. pred (optional) predictions indices. threads (optional) number threads use. parallel.level (optional) level parallelism, low high. bidirectional (optional) whether examine bidirectional causality. progressbar (optional) whether show progress bar.","code":""},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convergent cross mapping — ccm","text":"list xmap cross mapping results varname names causal effect variable bidirectional whether examine bidirectional causality","code":""},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"convergent cross mapping — ccm","text":"Sugihara, G., May, R., Ye, H., Hsieh, C., Deyle, E., Fogarty, M., Munch, S., 2012. Detecting Causality Complex Ecosystems. Science 338, 496–500.","code":""},{"path":"https://stscl.github.io/tEDM/reference/ccm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convergent cross mapping — ccm","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) ccm(sim,\"x\",\"y\",libsizes = seq(5,45,5),E = 9,k = 7,threads = 1) #>  Computing: [========================================] 100% (done)                          #>  Computing: [========================================] 100% (done)                          #>   libsizes      x->y      y->x #> 1        5 0.7496181 0.5370231 #> 2       10 0.8629427 0.6227933 #> 3       15 0.8793957 0.6313704 #> 4       20 0.8774940 0.6349501 #> 5       25 0.8757301 0.6325427 #> 6       30 0.8730860 0.6325198 #> 7       35 0.8721347 0.6338847 #> 8       37 0.9058220 0.7074703"},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":null,"dir":"Reference","previous_headings":"","what":"cross mapping cardinality — cmc","title":"cross mapping cardinality — cmc","text":"cross mapping cardinality","code":""},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cross mapping cardinality — cmc","text":"","code":"# S4 method for class 'data.frame' cmc(   data,   cause,   effect,   libsizes = NULL,   E = 3,   tau = 0,   k = pmin(E^2),   lib = NULL,   pred = NULL,   threads = length(libsizes),   parallel.level = \"low\",   bidirectional = TRUE,   progressbar = TRUE )"},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cross mapping cardinality — cmc","text":"data observation data. cause name causal variable. effect name effect variable. libsizes (optional) number time points used. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors. lib (optional) libraries indices. pred (optional) predictions indices. threads (optional) number threads use. parallel.level (optional) level parallelism, low high. bidirectional (optional) whether examine bidirectional causality. progressbar (optional) whether show progress bar.","code":""},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cross mapping cardinality — cmc","text":"list xmap cross mapping results cs causal strength varname names causal effect variable bidirectional whether examine bidirectional causality","code":""},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"cross mapping cardinality — cmc","text":"Tao, P., Wang, Q., Shi, J., Hao, X., Liu, X., Min, B., Zhang, Y., Li, C., Cui, H., Chen, L., 2023. Detecting dynamical causality intersection cardinal concavity. Fundamental Research.","code":""},{"path":"https://stscl.github.io/tEDM/reference/cmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cross mapping cardinality — cmc","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) cmc(sim,\"x\",\"y\",E = 4,k = 15,threads = 1) #>  Computing: [========================================] 100% (done)                          #>  Computing: [========================================] 100% (done)                          #>   neighbors      x->y      y->x #> 1        15 0.2533333 0.1377778"},{"path":"https://stscl.github.io/tEDM/reference/embedded.html","id":null,"dir":"Reference","previous_headings":"","what":"embedding time series data — embedded","title":"embedding time series data — embedded","text":"embedding time series data","code":""},{"path":"https://stscl.github.io/tEDM/reference/embedded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"embedding time series data — embedded","text":"","code":"# S4 method for class 'data.frame' embedded(data, target, E = 3, tau = 0)"},{"path":"https://stscl.github.io/tEDM/reference/embedded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"embedding time series data — embedded","text":"data observation data. target name target variable. E (optional) embedding dimensions. tau (optional) step time lags.","code":""},{"path":"https://stscl.github.io/tEDM/reference/embedded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"embedding time series data — embedded","text":"matrix","code":""},{"path":"https://stscl.github.io/tEDM/reference/embedded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"embedding time series data — embedded","text":"","code":"embedded(data.frame(t = 1:5),\"t\",3) #>      [,1] [,2] [,3] #> [1,]    1  NaN  NaN #> [2,]    2    1  NaN #> [3,]    3    2    1 #> [4,]    4    3    2 #> [5,]    5    4    3"},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":null,"dir":"Reference","previous_headings":"","what":"false nearest neighbours — fnn","title":"false nearest neighbours — fnn","text":"false nearest neighbours","code":""},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"false nearest neighbours — fnn","text":"","code":"# S4 method for class 'data.frame' fnn(   data,   target,   lib = NULL,   pred = NULL,   E = 2:10,   tau = 0,   rt = 10,   eps = 2,   threads = length(E) )"},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"false nearest neighbours — fnn","text":"data observation data. target name target variable. lib (optional) libraries indices. pred (optional) predictions indices. E (optional) embedding dimensions. tau (optional) step time lags. rt (optional) escape factor. eps (optional) neighborhood diameter. threads (optional) number threads use.","code":""},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"false nearest neighbours — fnn","text":"vector","code":""},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"false nearest neighbours — fnn","text":"Kennel M. B., Brown R. Abarbanel H. D. ., Determining embedding dimension phase-space reconstruction using geometrical construction, Phys. Rev. , Volume 45, 3403 (1992).","code":""},{"path":"https://stscl.github.io/tEDM/reference/fnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"false nearest neighbours — fnn","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) fnn(sim,\"x\",threads = 1) #>       E:1       E:2       E:3       E:4       E:5       E:6       E:7       E:8  #> 0.1777778 0.1333333 0.1111111 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000  #>       E:9  #> 0.0000000"},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":null,"dir":"Reference","previous_headings":"","what":"intersection cardinality — ic","title":"intersection cardinality — ic","text":"intersection cardinality","code":""},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"intersection cardinality — ic","text":"","code":"# S4 method for class 'data.frame' ic(   data,   column,   target,   lib = NULL,   pred = NULL,   E = 2:10,   tau = 0,   k = E + 2,   threads = length(pred),   parallel.level = \"low\" )"},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"intersection cardinality — ic","text":"data observation data. column name library variable. target name target variable. lib (optional) libraries indices. pred (optional) predictions indices. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors used prediction. threads (optional) number threads use. parallel.level (optional) level parallelism, low high.","code":""},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"intersection cardinality — ic","text":"list xmap cross mapping performance varname name target variable method method cross mapping tau step time lag","code":""},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"intersection cardinality — ic","text":"Tao, P., Wang, Q., Shi, J., Hao, X., Liu, X., Min, B., Zhang, Y., Li, C., Cui, H., Chen, L., 2023. Detecting dynamical causality intersection cardinal concavity. Fundamental Research.","code":""},{"path":"https://stscl.github.io/tEDM/reference/ic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"intersection cardinality — ic","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) ic(sim,\"x\",\"y\",E = 4,k = 15:30,threads = 1) #> The suggested E and k for variable y is 4 and 15"},{"path":"https://stscl.github.io/tEDM/reference/logistic_map.html","id":null,"dir":"Reference","previous_headings":"","what":"logistic map — logistic_map","title":"logistic map — logistic_map","text":"logistic map","code":""},{"path":"https://stscl.github.io/tEDM/reference/logistic_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logistic map — logistic_map","text":"","code":"logistic_map(   x,   y = NULL,   z = NULL,   step = 15,   alpha_x = 3.6,   alpha_y = 3.72,   alpha_z = 3.68,   beta_xy = 0.05,   beta_xz = 0.05,   beta_yx = 0.2,   beta_yz = 0.2,   beta_zx = 0.35,   beta_zy = 0.35,   threshold = Inf,   transient = 1 )"},{"path":"https://stscl.github.io/tEDM/reference/logistic_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logistic map — logistic_map","text":"x value x. y (optional) value y. z (optional) value z. step (optional) number simulation time steps. alpha_x (optional) growth parameter x. alpha_y (optional) growth parameter y. alpha_z (optional) growth parameter y. beta_xy (optional) cross-inhibition x y. beta_xz (optional) cross-inhibition x z. beta_yx (optional) cross-inhibition y x. beta_yz (optional) cross-inhibition y z. beta_zx (optional) cross-inhibition z x. beta_zy (optional) cross-inhibition z y. threshold (optional) set NaN absolute value exceeds threshold. transient (optional) transients excluded results.","code":""},{"path":"https://stscl.github.io/tEDM/reference/logistic_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logistic map — logistic_map","text":"data.frame","code":""},{"path":"https://stscl.github.io/tEDM/reference/logistic_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logistic map — logistic_map","text":"","code":"logistic_map(x = 0.2) #>            x #> 1  0.5760000 #> 2  0.8792064 #> 3  0.3823290 #> 4  0.8501527 #> 5  0.4586150 #> 6  0.8938342 #> 7  0.3416206 #> 8  0.8096975 #> 9  0.5547149 #> 10 0.8892226 #> 11 0.3546207 #> 12 0.8239135 #> 13 0.5222881 #> 14 0.8982117 #> 15 0.3291389"},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":null,"dir":"Reference","previous_headings":"","what":"multispatial convergent cross mapping — multispatialccm","title":"multispatial convergent cross mapping — multispatialccm","text":"multispatial convergent cross mapping","code":""},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multispatial convergent cross mapping — multispatialccm","text":"","code":"# S4 method for class 'list' multispatialccm(   data,   cause,   effect,   libsizes,   E = 3,   tau = 0,   k = E + 1,   boot = 99,   seed = 42,   threads = length(libsizes),   parallel.level = \"low\",   bidirectional = TRUE,   progressbar = TRUE )"},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multispatial convergent cross mapping — multispatialccm","text":"data observation data. cause name causal variable. effect name effect variable. libsizes number time points used prediction. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors used prediction. boot (optional) number bootstraps perform. seed (optional) random seed. threads (optional) number threads use. parallel.level (optional) level parallelism, low high. bidirectional (optional) whether examine bidirectional causality. progressbar (optional) whether show progress bar.","code":""},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multispatial convergent cross mapping — multispatialccm","text":"list xmap cross mapping results varname names causal effect variable bidirectional whether examine bidirectional causality","code":""},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"multispatial convergent cross mapping — multispatialccm","text":"Clark, .T., Ye, H., Isbell, F., Deyle, E.R., Cowles, J., Tilman, G.D., Sugihara, G., 2015. Spatial convergent cross mapping detect causal relationships short time series. Ecology 96, 1174–1181.","code":""},{"path":"https://stscl.github.io/tEDM/reference/multispatialccm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multispatial convergent cross mapping — multispatialccm","text":"","code":"set.seed(42) obs = runif(15,0,0.1) sim = vector(\"list\",15) for (i in seq_along(obs)){   sim[[i]] = logistic_map(x = obs[i],y = obs[i],step = 15,beta_xy = 0.5,beta_yx = 0) } lst = list(x = do.call(cbind, lapply(sim, function(df) df$x)),            y = do.call(cbind, lapply(sim, function(df) df$y))) multispatialccm(lst,\"x\",\"y\",libsizes = 5:15,E = c(7,2),k = 6,threads = 1) #>  Computing: [========================================] 100% (done)                          #>  Computing: [========================================] 100% (done)                          #>    libsizes      x->y      y->x #> 1         5 0.7665126 0.6929759 #> 2         6 0.8155336 0.7418481 #> 3         7 0.8427247 0.7738482 #> 4         8 0.8615120 0.7983056 #> 5         9 0.8751009 0.8152952 #> 6        10 0.8853064 0.8323882 #> 7        11 0.8987007 0.8527309 #> 8        12 0.9110421 0.8747777 #> 9        13 0.9201259 0.8843184 #> 10       14 0.9287790 0.8966083 #> 11       15 0.9357402 0.9051681"},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":null,"dir":"Reference","previous_headings":"","what":"partial cross mapping — pcm","title":"partial cross mapping — pcm","text":"partial cross mapping","code":""},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"partial cross mapping — pcm","text":"","code":"# S4 method for class 'data.frame' pcm(   data,   cause,   effect,   conds,   libsizes = NULL,   E = 3,   tau = 0,   k = E + 1,   theta = 1,   algorithm = \"simplex\",   lib = NULL,   pred = NULL,   threads = length(libsizes),   parallel.level = \"low\",   bidirectional = TRUE,   cumulate = FALSE,   progressbar = TRUE )"},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"partial cross mapping — pcm","text":"data observation data. cause name causal variable. effect name effect variable. conds name conditioning variables. libsizes (optional) number time points used. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors. theta (optional) weighting parameter distances, useful algorithm smap. algorithm (optional) prediction algorithm. lib (optional) libraries indices. pred (optional) predictions indices. threads (optional) number threads use. parallel.level (optional) level parallelism, low high. bidirectional (optional) whether examine bidirectional causality. cumulate (optional) serial cumulative computation partial cross mapping. progressbar (optional) whether show progress bar.","code":""},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"partial cross mapping — pcm","text":"list pxmap partial cross mapping results xmap cross mapping results varname names causal effect variable bidirectional whether examine bidirectional causality","code":""},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"partial cross mapping — pcm","text":"Leng, S., Ma, H., Kurths, J. et al. Partial cross mapping eliminates indirect causal influences. Nat Commun 11, 2632 (2020).","code":""},{"path":"https://stscl.github.io/tEDM/reference/pcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"partial cross mapping — pcm","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,z = 0.4,step = 45,                    beta_xy = 0.5, beta_xz = 0,                    beta_yx = 0, beta_yz = 0.5,                    beta_zx = 0, beta_zy = 0) pcm(sim,\"x\",\"z\",\"y\",libsizes = seq(5,45,5),E = 9,k = 7,threads = 1) #>  Computing: [========================================] 100% (done)                          #>  Computing: [========================================] 100% (done)                          #> --------------------------------------  #> ***partial cross mapping prediction***  #> --------------------------------------  #>   libsizes      x->z       z->x #> 1        5 0.4031409 0.15436158 #> 2       10 0.2924073 0.06431117 #> 3       15 0.2315126 0.06146024 #> 4       20 0.2258133 0.11499257 #> 5       25 0.2212198 0.14445706 #> 6       29 0.1187136 0.19047712 #>  #> ------------------------------  #> ***cross mapping prediction***  #> ------------------------------  #>   libsizes      x->z      z->x #> 1        5 0.7951207 0.6217198 #> 2       10 0.8682935 0.6404764 #> 3       15 0.8797832 0.6379368 #> 4       20 0.8796930 0.6421839 #> 5       25 0.8758969 0.6457823 #> 6       29 0.9266489 0.6514443"},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":null,"dir":"Reference","previous_headings":"","what":"simplex forecast — simplex","title":"simplex forecast — simplex","text":"simplex forecast","code":""},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simplex forecast — simplex","text":"","code":"# S4 method for class 'data.frame' simplex(   data,   column,   target,   lib = NULL,   pred = NULL,   E = 2:10,   tau = 0,   k = E + 1,   threads = length(E) )  # S4 method for class 'list' simplex(   data,   column,   target,   lib = NULL,   pred = NULL,   E = 2:10,   tau = 0,   k = E + 1,   threads = length(E) )"},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simplex forecast — simplex","text":"data observation data. column name library variable. target name target variable. lib (optional) libraries indices. pred (optional) predictions indices. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors used prediction. threads (optional) number threads use.","code":""},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simplex forecast — simplex","text":"list xmap forecast performance varname name target variable method method cross mapping tau step time lag","code":""},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"simplex forecast — simplex","text":"Sugihara G. May R. 1990. Nonlinear forecasting way distinguishing chaos measurement error time series. Nature, 344:734-741.","code":""},{"path":"https://stscl.github.io/tEDM/reference/simplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simplex forecast — simplex","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) simplex(sim,\"x\",\"y\",E = 4:10,k = 7,threads = 1) #> The suggested E and k for variable y is 9 and 7"},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":null,"dir":"Reference","previous_headings":"","what":"smap forecast — smap","title":"smap forecast — smap","text":"smap forecast","code":""},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"smap forecast — smap","text":"","code":"# S4 method for class 'data.frame' smap(   data,   column,   target,   lib = NULL,   pred = NULL,   E = 3,   tau = 0,   k = E + 1,   theta = c(0, 1e-04, 3e-04, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3,     4, 6, 8),   threads = length(theta) )"},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"smap forecast — smap","text":"data observation data. column name library variable. target name target variable. lib (optional) libraries indices. pred (optional) predictions indices. E (optional) embedding dimensions. tau (optional) step time lags. k (optional) number nearest neighbors used prediction. theta (optional) weighting parameter distances. threads (optional) number threads use.","code":""},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"smap forecast — smap","text":"list xmap forecast performance varname name target variable method method cross mapping","code":""},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"smap forecast — smap","text":"Sugihara G. 1994. Nonlinear forecasting classification natural time series. Philosophical Transactions: Physical Sciences Engineering, 348 (1688):477-495.","code":""},{"path":"https://stscl.github.io/tEDM/reference/smap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"smap forecast — smap","text":"","code":"sim = logistic_map(x = 0.4,y = 0.4,step = 45,beta_xy = 0.5,beta_yx = 0) smap(sim,\"x\",\"y\",E = 9,k = 7,threads = 1) #> The suggested theta for variable y is 2"},{"path":[]},{"path":"https://stscl.github.io/tEDM/news/index.html","id":"enhancements-1-1","dir":"Changelog","previous_headings":"","what":"enhancements","title":"tEDM 1.1","text":"Safeguard transient removal logic logistic map prevent index errors (#96).","code":""},{"path":"https://stscl.github.io/tEDM/news/index.html","id":"breaking-changes-1-1","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"tEDM 1.1","text":"Refine lib pred index filtering logic cross mapping (#102).","code":""},{"path":"https://stscl.github.io/tEDM/news/index.html","id":"tedm-10","dir":"Changelog","previous_headings":"","what":"tEDM 1.0","title":"tEDM 1.0","text":"CRAN release: 2025-07-15","code":""},{"path":"https://stscl.github.io/tEDM/news/index.html","id":"new-1-0","dir":"Changelog","previous_headings":"","what":"new","title":"tEDM 1.0","text":"First stable release (#93).","code":""}]
